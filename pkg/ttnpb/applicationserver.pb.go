// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/applicationserver.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/TheThingsIndustries/protoc-gen-go-json/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AsConfiguration_PubSub_Providers_Status int32

const (
	// No restrictions are in place.
	AsConfiguration_PubSub_Providers_ENABLED AsConfiguration_PubSub_Providers_Status = 0
	// Warnings are being emitted that the provider will be deprecated in the future.
	AsConfiguration_PubSub_Providers_WARNING AsConfiguration_PubSub_Providers_Status = 1
	// New integrations cannot be set up, and old ones do not start.
	AsConfiguration_PubSub_Providers_DISABLED AsConfiguration_PubSub_Providers_Status = 2
)

var AsConfiguration_PubSub_Providers_Status_name = map[int32]string{
	0: "ENABLED",
	1: "WARNING",
	2: "DISABLED",
}

var AsConfiguration_PubSub_Providers_Status_value = map[string]int32{
	"ENABLED":  0,
	"WARNING":  1,
	"DISABLED": 2,
}

func (AsConfiguration_PubSub_Providers_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{4, 0, 0, 0}
}

type ApplicationLink struct {
	// Default message payload formatters to use when there are no formatters
	// defined on the end device level.
	DefaultFormatters *MessagePayloadFormatters `protobuf:"bytes,3,opt,name=default_formatters,json=defaultFormatters,proto3" json:"default_formatters,omitempty"`
	// Skip decryption of uplink payloads and encryption of downlink payloads.
	// Leave empty for the using the Application Server's default setting.
	SkipPayloadCrypto    *types.BoolValue `protobuf:"bytes,5,opt,name=skip_payload_crypto,json=skipPayloadCrypto,proto3" json:"skip_payload_crypto,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ApplicationLink) Reset()      { *m = ApplicationLink{} }
func (*ApplicationLink) ProtoMessage() {}
func (*ApplicationLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{0}
}
func (m *ApplicationLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationLink.Unmarshal(m, b)
}
func (m *ApplicationLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationLink.Marshal(b, m, deterministic)
}
func (m *ApplicationLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLink.Merge(m, src)
}
func (m *ApplicationLink) XXX_Size() int {
	return xxx_messageInfo_ApplicationLink.Size(m)
}
func (m *ApplicationLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLink proto.InternalMessageInfo

func (m *ApplicationLink) GetDefaultFormatters() *MessagePayloadFormatters {
	if m != nil {
		return m.DefaultFormatters
	}
	return nil
}

func (m *ApplicationLink) GetSkipPayloadCrypto() *types.BoolValue {
	if m != nil {
		return m.SkipPayloadCrypto
	}
	return nil
}

type GetApplicationLinkRequest struct {
	ApplicationIds       *ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	FieldMask            *types.FieldMask        `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetApplicationLinkRequest) Reset()      { *m = GetApplicationLinkRequest{} }
func (*GetApplicationLinkRequest) ProtoMessage() {}
func (*GetApplicationLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{1}
}
func (m *GetApplicationLinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetApplicationLinkRequest.Unmarshal(m, b)
}
func (m *GetApplicationLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetApplicationLinkRequest.Marshal(b, m, deterministic)
}
func (m *GetApplicationLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationLinkRequest.Merge(m, src)
}
func (m *GetApplicationLinkRequest) XXX_Size() int {
	return xxx_messageInfo_GetApplicationLinkRequest.Size(m)
}
func (m *GetApplicationLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationLinkRequest proto.InternalMessageInfo

func (m *GetApplicationLinkRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

func (m *GetApplicationLinkRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type SetApplicationLinkRequest struct {
	ApplicationIds       *ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	Link                 *ApplicationLink        `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	FieldMask            *types.FieldMask        `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SetApplicationLinkRequest) Reset()      { *m = SetApplicationLinkRequest{} }
func (*SetApplicationLinkRequest) ProtoMessage() {}
func (*SetApplicationLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{2}
}
func (m *SetApplicationLinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetApplicationLinkRequest.Unmarshal(m, b)
}
func (m *SetApplicationLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetApplicationLinkRequest.Marshal(b, m, deterministic)
}
func (m *SetApplicationLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationLinkRequest.Merge(m, src)
}
func (m *SetApplicationLinkRequest) XXX_Size() int {
	return xxx_messageInfo_SetApplicationLinkRequest.Size(m)
}
func (m *SetApplicationLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationLinkRequest proto.InternalMessageInfo

func (m *SetApplicationLinkRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

func (m *SetApplicationLinkRequest) GetLink() *ApplicationLink {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *SetApplicationLinkRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

// Link stats as monitored by the Application Server.
type ApplicationLinkStats struct {
	LinkedAt             *types.Timestamp `protobuf:"bytes,1,opt,name=linked_at,json=linkedAt,proto3" json:"linked_at,omitempty"`
	NetworkServerAddress string           `protobuf:"bytes,2,opt,name=network_server_address,json=networkServerAddress,proto3" json:"network_server_address,omitempty"`
	// Timestamp when the last upstream message has been received from a Network Server.
	// This can be a join-accept, uplink message or downlink message event.
	LastUpReceivedAt *types.Timestamp `protobuf:"bytes,3,opt,name=last_up_received_at,json=lastUpReceivedAt,proto3" json:"last_up_received_at,omitempty"`
	// Number of upstream messages received.
	UpCount uint64 `protobuf:"varint,4,opt,name=up_count,json=upCount,proto3" json:"up_count,omitempty"`
	// Timestamp when the last downlink message has been forwarded to a Network Server.
	LastDownlinkForwardedAt *types.Timestamp `protobuf:"bytes,5,opt,name=last_downlink_forwarded_at,json=lastDownlinkForwardedAt,proto3" json:"last_downlink_forwarded_at,omitempty"`
	// Number of downlink messages forwarded.
	DownlinkCount        uint64   `protobuf:"varint,6,opt,name=downlink_count,json=downlinkCount,proto3" json:"downlink_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationLinkStats) Reset()      { *m = ApplicationLinkStats{} }
func (*ApplicationLinkStats) ProtoMessage() {}
func (*ApplicationLinkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{3}
}
func (m *ApplicationLinkStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationLinkStats.Unmarshal(m, b)
}
func (m *ApplicationLinkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationLinkStats.Marshal(b, m, deterministic)
}
func (m *ApplicationLinkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLinkStats.Merge(m, src)
}
func (m *ApplicationLinkStats) XXX_Size() int {
	return xxx_messageInfo_ApplicationLinkStats.Size(m)
}
func (m *ApplicationLinkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLinkStats.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLinkStats proto.InternalMessageInfo

func (m *ApplicationLinkStats) GetLinkedAt() *types.Timestamp {
	if m != nil {
		return m.LinkedAt
	}
	return nil
}

func (m *ApplicationLinkStats) GetNetworkServerAddress() string {
	if m != nil {
		return m.NetworkServerAddress
	}
	return ""
}

func (m *ApplicationLinkStats) GetLastUpReceivedAt() *types.Timestamp {
	if m != nil {
		return m.LastUpReceivedAt
	}
	return nil
}

func (m *ApplicationLinkStats) GetUpCount() uint64 {
	if m != nil {
		return m.UpCount
	}
	return 0
}

func (m *ApplicationLinkStats) GetLastDownlinkForwardedAt() *types.Timestamp {
	if m != nil {
		return m.LastDownlinkForwardedAt
	}
	return nil
}

func (m *ApplicationLinkStats) GetDownlinkCount() uint64 {
	if m != nil {
		return m.DownlinkCount
	}
	return 0
}

// Application Server configuration.
type AsConfiguration struct {
	Pubsub               *AsConfiguration_PubSub `protobuf:"bytes,1,opt,name=pubsub,proto3" json:"pubsub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AsConfiguration) Reset()      { *m = AsConfiguration{} }
func (*AsConfiguration) ProtoMessage() {}
func (*AsConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{4}
}
func (m *AsConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsConfiguration.Unmarshal(m, b)
}
func (m *AsConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsConfiguration.Marshal(b, m, deterministic)
}
func (m *AsConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsConfiguration.Merge(m, src)
}
func (m *AsConfiguration) XXX_Size() int {
	return xxx_messageInfo_AsConfiguration.Size(m)
}
func (m *AsConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AsConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AsConfiguration proto.InternalMessageInfo

func (m *AsConfiguration) GetPubsub() *AsConfiguration_PubSub {
	if m != nil {
		return m.Pubsub
	}
	return nil
}

type AsConfiguration_PubSub struct {
	Providers            *AsConfiguration_PubSub_Providers `protobuf:"bytes,1,opt,name=providers,proto3" json:"providers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *AsConfiguration_PubSub) Reset()      { *m = AsConfiguration_PubSub{} }
func (*AsConfiguration_PubSub) ProtoMessage() {}
func (*AsConfiguration_PubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{4, 0}
}
func (m *AsConfiguration_PubSub) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsConfiguration_PubSub.Unmarshal(m, b)
}
func (m *AsConfiguration_PubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsConfiguration_PubSub.Marshal(b, m, deterministic)
}
func (m *AsConfiguration_PubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsConfiguration_PubSub.Merge(m, src)
}
func (m *AsConfiguration_PubSub) XXX_Size() int {
	return xxx_messageInfo_AsConfiguration_PubSub.Size(m)
}
func (m *AsConfiguration_PubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_AsConfiguration_PubSub.DiscardUnknown(m)
}

var xxx_messageInfo_AsConfiguration_PubSub proto.InternalMessageInfo

func (m *AsConfiguration_PubSub) GetProviders() *AsConfiguration_PubSub_Providers {
	if m != nil {
		return m.Providers
	}
	return nil
}

type AsConfiguration_PubSub_Providers struct {
	Mqtt                 AsConfiguration_PubSub_Providers_Status `protobuf:"varint,1,opt,name=mqtt,proto3,enum=ttn.lorawan.v3.AsConfiguration_PubSub_Providers_Status" json:"mqtt,omitempty"`
	Nats                 AsConfiguration_PubSub_Providers_Status `protobuf:"varint,2,opt,name=nats,proto3,enum=ttn.lorawan.v3.AsConfiguration_PubSub_Providers_Status" json:"nats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *AsConfiguration_PubSub_Providers) Reset()      { *m = AsConfiguration_PubSub_Providers{} }
func (*AsConfiguration_PubSub_Providers) ProtoMessage() {}
func (*AsConfiguration_PubSub_Providers) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{4, 0, 0}
}
func (m *AsConfiguration_PubSub_Providers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsConfiguration_PubSub_Providers.Unmarshal(m, b)
}
func (m *AsConfiguration_PubSub_Providers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsConfiguration_PubSub_Providers.Marshal(b, m, deterministic)
}
func (m *AsConfiguration_PubSub_Providers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsConfiguration_PubSub_Providers.Merge(m, src)
}
func (m *AsConfiguration_PubSub_Providers) XXX_Size() int {
	return xxx_messageInfo_AsConfiguration_PubSub_Providers.Size(m)
}
func (m *AsConfiguration_PubSub_Providers) XXX_DiscardUnknown() {
	xxx_messageInfo_AsConfiguration_PubSub_Providers.DiscardUnknown(m)
}

var xxx_messageInfo_AsConfiguration_PubSub_Providers proto.InternalMessageInfo

func (m *AsConfiguration_PubSub_Providers) GetMqtt() AsConfiguration_PubSub_Providers_Status {
	if m != nil {
		return m.Mqtt
	}
	return AsConfiguration_PubSub_Providers_ENABLED
}

func (m *AsConfiguration_PubSub_Providers) GetNats() AsConfiguration_PubSub_Providers_Status {
	if m != nil {
		return m.Nats
	}
	return AsConfiguration_PubSub_Providers_ENABLED
}

type GetAsConfigurationRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAsConfigurationRequest) Reset()      { *m = GetAsConfigurationRequest{} }
func (*GetAsConfigurationRequest) ProtoMessage() {}
func (*GetAsConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{5}
}
func (m *GetAsConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAsConfigurationRequest.Unmarshal(m, b)
}
func (m *GetAsConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAsConfigurationRequest.Marshal(b, m, deterministic)
}
func (m *GetAsConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAsConfigurationRequest.Merge(m, src)
}
func (m *GetAsConfigurationRequest) XXX_Size() int {
	return xxx_messageInfo_GetAsConfigurationRequest.Size(m)
}
func (m *GetAsConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAsConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAsConfigurationRequest proto.InternalMessageInfo

type GetAsConfigurationResponse struct {
	Configuration        *AsConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetAsConfigurationResponse) Reset()      { *m = GetAsConfigurationResponse{} }
func (*GetAsConfigurationResponse) ProtoMessage() {}
func (*GetAsConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{6}
}
func (m *GetAsConfigurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAsConfigurationResponse.Unmarshal(m, b)
}
func (m *GetAsConfigurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAsConfigurationResponse.Marshal(b, m, deterministic)
}
func (m *GetAsConfigurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAsConfigurationResponse.Merge(m, src)
}
func (m *GetAsConfigurationResponse) XXX_Size() int {
	return xxx_messageInfo_GetAsConfigurationResponse.Size(m)
}
func (m *GetAsConfigurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAsConfigurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAsConfigurationResponse proto.InternalMessageInfo

func (m *GetAsConfigurationResponse) GetConfiguration() *AsConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// Container for multiple Application uplink messages.
type NsAsHandleUplinkRequest struct {
	ApplicationUps       []*ApplicationUp `protobuf:"bytes,1,rep,name=application_ups,json=applicationUps,proto3" json:"application_ups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NsAsHandleUplinkRequest) Reset()      { *m = NsAsHandleUplinkRequest{} }
func (*NsAsHandleUplinkRequest) ProtoMessage() {}
func (*NsAsHandleUplinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{7}
}
func (m *NsAsHandleUplinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NsAsHandleUplinkRequest.Unmarshal(m, b)
}
func (m *NsAsHandleUplinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NsAsHandleUplinkRequest.Marshal(b, m, deterministic)
}
func (m *NsAsHandleUplinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NsAsHandleUplinkRequest.Merge(m, src)
}
func (m *NsAsHandleUplinkRequest) XXX_Size() int {
	return xxx_messageInfo_NsAsHandleUplinkRequest.Size(m)
}
func (m *NsAsHandleUplinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NsAsHandleUplinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NsAsHandleUplinkRequest proto.InternalMessageInfo

func (m *NsAsHandleUplinkRequest) GetApplicationUps() []*ApplicationUp {
	if m != nil {
		return m.ApplicationUps
	}
	return nil
}

type EncodeDownlinkRequest struct {
	EndDeviceIds         *EndDeviceIdentifiers        `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3" json:"end_device_ids,omitempty"`
	VersionIds           *EndDeviceVersionIdentifiers `protobuf:"bytes,2,opt,name=version_ids,json=versionIds,proto3" json:"version_ids,omitempty"`
	Downlink             *ApplicationDownlink         `protobuf:"bytes,3,opt,name=downlink,proto3" json:"downlink,omitempty"`
	Formatter            PayloadFormatter             `protobuf:"varint,4,opt,name=formatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"formatter,omitempty"`
	Parameter            string                       `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *EncodeDownlinkRequest) Reset()      { *m = EncodeDownlinkRequest{} }
func (*EncodeDownlinkRequest) ProtoMessage() {}
func (*EncodeDownlinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{8}
}
func (m *EncodeDownlinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncodeDownlinkRequest.Unmarshal(m, b)
}
func (m *EncodeDownlinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncodeDownlinkRequest.Marshal(b, m, deterministic)
}
func (m *EncodeDownlinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeDownlinkRequest.Merge(m, src)
}
func (m *EncodeDownlinkRequest) XXX_Size() int {
	return xxx_messageInfo_EncodeDownlinkRequest.Size(m)
}
func (m *EncodeDownlinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeDownlinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeDownlinkRequest proto.InternalMessageInfo

func (m *EncodeDownlinkRequest) GetEndDeviceIds() *EndDeviceIdentifiers {
	if m != nil {
		return m.EndDeviceIds
	}
	return nil
}

func (m *EncodeDownlinkRequest) GetVersionIds() *EndDeviceVersionIdentifiers {
	if m != nil {
		return m.VersionIds
	}
	return nil
}

func (m *EncodeDownlinkRequest) GetDownlink() *ApplicationDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *EncodeDownlinkRequest) GetFormatter() PayloadFormatter {
	if m != nil {
		return m.Formatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *EncodeDownlinkRequest) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

type EncodeDownlinkResponse struct {
	Downlink             *ApplicationDownlink `protobuf:"bytes,1,opt,name=downlink,proto3" json:"downlink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EncodeDownlinkResponse) Reset()      { *m = EncodeDownlinkResponse{} }
func (*EncodeDownlinkResponse) ProtoMessage() {}
func (*EncodeDownlinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{9}
}
func (m *EncodeDownlinkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncodeDownlinkResponse.Unmarshal(m, b)
}
func (m *EncodeDownlinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncodeDownlinkResponse.Marshal(b, m, deterministic)
}
func (m *EncodeDownlinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeDownlinkResponse.Merge(m, src)
}
func (m *EncodeDownlinkResponse) XXX_Size() int {
	return xxx_messageInfo_EncodeDownlinkResponse.Size(m)
}
func (m *EncodeDownlinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeDownlinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeDownlinkResponse proto.InternalMessageInfo

func (m *EncodeDownlinkResponse) GetDownlink() *ApplicationDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

type DecodeUplinkRequest struct {
	EndDeviceIds         *EndDeviceIdentifiers        `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3" json:"end_device_ids,omitempty"`
	VersionIds           *EndDeviceVersionIdentifiers `protobuf:"bytes,2,opt,name=version_ids,json=versionIds,proto3" json:"version_ids,omitempty"`
	Uplink               *ApplicationUplink           `protobuf:"bytes,3,opt,name=uplink,proto3" json:"uplink,omitempty"`
	Formatter            PayloadFormatter             `protobuf:"varint,4,opt,name=formatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"formatter,omitempty"`
	Parameter            string                       `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DecodeUplinkRequest) Reset()      { *m = DecodeUplinkRequest{} }
func (*DecodeUplinkRequest) ProtoMessage() {}
func (*DecodeUplinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{10}
}
func (m *DecodeUplinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecodeUplinkRequest.Unmarshal(m, b)
}
func (m *DecodeUplinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecodeUplinkRequest.Marshal(b, m, deterministic)
}
func (m *DecodeUplinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodeUplinkRequest.Merge(m, src)
}
func (m *DecodeUplinkRequest) XXX_Size() int {
	return xxx_messageInfo_DecodeUplinkRequest.Size(m)
}
func (m *DecodeUplinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodeUplinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecodeUplinkRequest proto.InternalMessageInfo

func (m *DecodeUplinkRequest) GetEndDeviceIds() *EndDeviceIdentifiers {
	if m != nil {
		return m.EndDeviceIds
	}
	return nil
}

func (m *DecodeUplinkRequest) GetVersionIds() *EndDeviceVersionIdentifiers {
	if m != nil {
		return m.VersionIds
	}
	return nil
}

func (m *DecodeUplinkRequest) GetUplink() *ApplicationUplink {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *DecodeUplinkRequest) GetFormatter() PayloadFormatter {
	if m != nil {
		return m.Formatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *DecodeUplinkRequest) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

type DecodeUplinkResponse struct {
	Uplink               *ApplicationUplink `protobuf:"bytes,1,opt,name=uplink,proto3" json:"uplink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DecodeUplinkResponse) Reset()      { *m = DecodeUplinkResponse{} }
func (*DecodeUplinkResponse) ProtoMessage() {}
func (*DecodeUplinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{11}
}
func (m *DecodeUplinkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecodeUplinkResponse.Unmarshal(m, b)
}
func (m *DecodeUplinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecodeUplinkResponse.Marshal(b, m, deterministic)
}
func (m *DecodeUplinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodeUplinkResponse.Merge(m, src)
}
func (m *DecodeUplinkResponse) XXX_Size() int {
	return xxx_messageInfo_DecodeUplinkResponse.Size(m)
}
func (m *DecodeUplinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodeUplinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DecodeUplinkResponse proto.InternalMessageInfo

func (m *DecodeUplinkResponse) GetUplink() *ApplicationUplink {
	if m != nil {
		return m.Uplink
	}
	return nil
}

type DecodeDownlinkRequest struct {
	EndDeviceIds         *EndDeviceIdentifiers        `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3" json:"end_device_ids,omitempty"`
	VersionIds           *EndDeviceVersionIdentifiers `protobuf:"bytes,2,opt,name=version_ids,json=versionIds,proto3" json:"version_ids,omitempty"`
	Downlink             *ApplicationDownlink         `protobuf:"bytes,3,opt,name=downlink,proto3" json:"downlink,omitempty"`
	Formatter            PayloadFormatter             `protobuf:"varint,4,opt,name=formatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"formatter,omitempty"`
	Parameter            string                       `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DecodeDownlinkRequest) Reset()      { *m = DecodeDownlinkRequest{} }
func (*DecodeDownlinkRequest) ProtoMessage() {}
func (*DecodeDownlinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{12}
}
func (m *DecodeDownlinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecodeDownlinkRequest.Unmarshal(m, b)
}
func (m *DecodeDownlinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecodeDownlinkRequest.Marshal(b, m, deterministic)
}
func (m *DecodeDownlinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodeDownlinkRequest.Merge(m, src)
}
func (m *DecodeDownlinkRequest) XXX_Size() int {
	return xxx_messageInfo_DecodeDownlinkRequest.Size(m)
}
func (m *DecodeDownlinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodeDownlinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecodeDownlinkRequest proto.InternalMessageInfo

func (m *DecodeDownlinkRequest) GetEndDeviceIds() *EndDeviceIdentifiers {
	if m != nil {
		return m.EndDeviceIds
	}
	return nil
}

func (m *DecodeDownlinkRequest) GetVersionIds() *EndDeviceVersionIdentifiers {
	if m != nil {
		return m.VersionIds
	}
	return nil
}

func (m *DecodeDownlinkRequest) GetDownlink() *ApplicationDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *DecodeDownlinkRequest) GetFormatter() PayloadFormatter {
	if m != nil {
		return m.Formatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *DecodeDownlinkRequest) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

type DecodeDownlinkResponse struct {
	Downlink             *ApplicationDownlink `protobuf:"bytes,1,opt,name=downlink,proto3" json:"downlink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DecodeDownlinkResponse) Reset()      { *m = DecodeDownlinkResponse{} }
func (*DecodeDownlinkResponse) ProtoMessage() {}
func (*DecodeDownlinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df9d75a19dc066e1, []int{13}
}
func (m *DecodeDownlinkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecodeDownlinkResponse.Unmarshal(m, b)
}
func (m *DecodeDownlinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecodeDownlinkResponse.Marshal(b, m, deterministic)
}
func (m *DecodeDownlinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodeDownlinkResponse.Merge(m, src)
}
func (m *DecodeDownlinkResponse) XXX_Size() int {
	return xxx_messageInfo_DecodeDownlinkResponse.Size(m)
}
func (m *DecodeDownlinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodeDownlinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DecodeDownlinkResponse proto.InternalMessageInfo

func (m *DecodeDownlinkResponse) GetDownlink() *ApplicationDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.AsConfiguration_PubSub_Providers_Status", AsConfiguration_PubSub_Providers_Status_name, AsConfiguration_PubSub_Providers_Status_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.AsConfiguration_PubSub_Providers_Status", AsConfiguration_PubSub_Providers_Status_name, AsConfiguration_PubSub_Providers_Status_value)
	proto.RegisterType((*ApplicationLink)(nil), "ttn.lorawan.v3.ApplicationLink")
	golang_proto.RegisterType((*ApplicationLink)(nil), "ttn.lorawan.v3.ApplicationLink")
	proto.RegisterType((*GetApplicationLinkRequest)(nil), "ttn.lorawan.v3.GetApplicationLinkRequest")
	golang_proto.RegisterType((*GetApplicationLinkRequest)(nil), "ttn.lorawan.v3.GetApplicationLinkRequest")
	proto.RegisterType((*SetApplicationLinkRequest)(nil), "ttn.lorawan.v3.SetApplicationLinkRequest")
	golang_proto.RegisterType((*SetApplicationLinkRequest)(nil), "ttn.lorawan.v3.SetApplicationLinkRequest")
	proto.RegisterType((*ApplicationLinkStats)(nil), "ttn.lorawan.v3.ApplicationLinkStats")
	golang_proto.RegisterType((*ApplicationLinkStats)(nil), "ttn.lorawan.v3.ApplicationLinkStats")
	proto.RegisterType((*AsConfiguration)(nil), "ttn.lorawan.v3.AsConfiguration")
	golang_proto.RegisterType((*AsConfiguration)(nil), "ttn.lorawan.v3.AsConfiguration")
	proto.RegisterType((*AsConfiguration_PubSub)(nil), "ttn.lorawan.v3.AsConfiguration.PubSub")
	golang_proto.RegisterType((*AsConfiguration_PubSub)(nil), "ttn.lorawan.v3.AsConfiguration.PubSub")
	proto.RegisterType((*AsConfiguration_PubSub_Providers)(nil), "ttn.lorawan.v3.AsConfiguration.PubSub.Providers")
	golang_proto.RegisterType((*AsConfiguration_PubSub_Providers)(nil), "ttn.lorawan.v3.AsConfiguration.PubSub.Providers")
	proto.RegisterType((*GetAsConfigurationRequest)(nil), "ttn.lorawan.v3.GetAsConfigurationRequest")
	golang_proto.RegisterType((*GetAsConfigurationRequest)(nil), "ttn.lorawan.v3.GetAsConfigurationRequest")
	proto.RegisterType((*GetAsConfigurationResponse)(nil), "ttn.lorawan.v3.GetAsConfigurationResponse")
	golang_proto.RegisterType((*GetAsConfigurationResponse)(nil), "ttn.lorawan.v3.GetAsConfigurationResponse")
	proto.RegisterType((*NsAsHandleUplinkRequest)(nil), "ttn.lorawan.v3.NsAsHandleUplinkRequest")
	golang_proto.RegisterType((*NsAsHandleUplinkRequest)(nil), "ttn.lorawan.v3.NsAsHandleUplinkRequest")
	proto.RegisterType((*EncodeDownlinkRequest)(nil), "ttn.lorawan.v3.EncodeDownlinkRequest")
	golang_proto.RegisterType((*EncodeDownlinkRequest)(nil), "ttn.lorawan.v3.EncodeDownlinkRequest")
	proto.RegisterType((*EncodeDownlinkResponse)(nil), "ttn.lorawan.v3.EncodeDownlinkResponse")
	golang_proto.RegisterType((*EncodeDownlinkResponse)(nil), "ttn.lorawan.v3.EncodeDownlinkResponse")
	proto.RegisterType((*DecodeUplinkRequest)(nil), "ttn.lorawan.v3.DecodeUplinkRequest")
	golang_proto.RegisterType((*DecodeUplinkRequest)(nil), "ttn.lorawan.v3.DecodeUplinkRequest")
	proto.RegisterType((*DecodeUplinkResponse)(nil), "ttn.lorawan.v3.DecodeUplinkResponse")
	golang_proto.RegisterType((*DecodeUplinkResponse)(nil), "ttn.lorawan.v3.DecodeUplinkResponse")
	proto.RegisterType((*DecodeDownlinkRequest)(nil), "ttn.lorawan.v3.DecodeDownlinkRequest")
	golang_proto.RegisterType((*DecodeDownlinkRequest)(nil), "ttn.lorawan.v3.DecodeDownlinkRequest")
	proto.RegisterType((*DecodeDownlinkResponse)(nil), "ttn.lorawan.v3.DecodeDownlinkResponse")
	golang_proto.RegisterType((*DecodeDownlinkResponse)(nil), "ttn.lorawan.v3.DecodeDownlinkResponse")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/applicationserver.proto", fileDescriptor_df9d75a19dc066e1)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/applicationserver.proto", fileDescriptor_df9d75a19dc066e1)
}

var fileDescriptor_df9d75a19dc066e1 = []byte{
	// 1860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xf6, 0x90, 0x94, 0x4c, 0x8e, 0x65, 0x99, 0x1e, 0x39, 0x8e, 0xc4, 0xa4, 0xb2, 0xba, 0x71,
	0x5c, 0x49, 0x0d, 0x77, 0x5d, 0xba, 0x6d, 0x62, 0x15, 0x8d, 0xb0, 0xfa, 0xb1, 0x2c, 0x55, 0x52,
	0xe5, 0xa5, 0x1c, 0x23, 0xce, 0x0f, 0xb1, 0xe4, 0x8e, 0xa8, 0x2d, 0xc9, 0xdd, 0xc9, 0xce, 0x2c,
	0x15, 0xf9, 0x07, 0x28, 0x82, 0xa0, 0x05, 0x72, 0x28, 0x8a, 0xb4, 0x01, 0x7a, 0xef, 0xa5, 0xe8,
	0xad, 0xcd, 0xa1, 0xb7, 0x22, 0x40, 0x51, 0xa0, 0x40, 0x4f, 0x41, 0x2e, 0x05, 0x7a, 0xaa, 0xd3,
	0x16, 0x45, 0x0b, 0x14, 0x39, 0x07, 0x28, 0x50, 0xcc, 0xec, 0x2e, 0xb9, 0x3f, 0xa4, 0x48, 0x3b,
	0x86, 0x8c, 0x02, 0xbd, 0xcd, 0xee, 0xbc, 0xf7, 0xcd, 0xf7, 0xbd, 0xf7, 0xe6, 0xed, 0x13, 0x05,
	0xe7, 0x9a, 0xb6, 0xa3, 0x1f, 0xe8, 0x56, 0x91, 0x32, 0xbd, 0xd6, 0x50, 0x74, 0x62, 0x2a, 0x3a,
	0x21, 0x4d, 0xb3, 0xa6, 0x33, 0xd3, 0xb6, 0x28, 0x76, 0xda, 0xd8, 0x91, 0x89, 0x63, 0x33, 0x1b,
	0x8d, 0x33, 0x66, 0xc9, 0xbe, 0xb9, 0xdc, 0xbe, 0x52, 0x50, 0xeb, 0x26, 0xdb, 0x77, 0xab, 0x72,
	0xcd, 0x6e, 0x29, 0xd8, 0x6a, 0xdb, 0x87, 0xc4, 0xb1, 0xdf, 0x3e, 0x54, 0x84, 0x71, 0xad, 0x58,
	0xc7, 0x56, 0xb1, 0xad, 0x37, 0x4d, 0x43, 0x67, 0x58, 0x49, 0x2c, 0x3c, 0xc8, 0x42, 0x31, 0x04,
	0x51, 0xb7, 0xeb, 0xb6, 0xe7, 0x5c, 0x75, 0xf7, 0xc4, 0x93, 0x78, 0x10, 0x2b, 0xdf, 0x7c, 0x39,
	0x64, 0xbe, 0xbb, 0x8f, 0x77, 0xf7, 0x4d, 0xab, 0x4e, 0xd7, 0x2d, 0xc3, 0xa5, 0xcc, 0x31, 0x31,
	0x0d, 0x1f, 0x5d, 0xb7, 0x8b, 0xdf, 0xa3, 0xb6, 0xa5, 0xe8, 0x96, 0x65, 0x33, 0x4f, 0x8b, 0x0f,
	0xf2, 0x6c, 0xdd, 0xb6, 0xeb, 0x4d, 0xec, 0x49, 0x4d, 0xec, 0x3e, 0xe3, 0xef, 0x76, 0x88, 0xe0,
	0x16, 0x61, 0x87, 0xfe, 0xe6, 0x4c, 0x7c, 0x73, 0xcf, 0xc4, 0x4d, 0xa3, 0xd2, 0xd2, 0x69, 0xc3,
	0xb7, 0xb8, 0x10, 0xb7, 0x60, 0x66, 0x0b, 0x53, 0xa6, 0xb7, 0x88, 0x6f, 0x30, 0x1d, 0x37, 0x38,
	0x70, 0x74, 0x42, 0xb0, 0x13, 0x9c, 0x2f, 0x25, 0xf3, 0x81, 0x2d, 0xa3, 0x62, 0xe0, 0xb6, 0x59,
	0x0b, 0xa2, 0xf6, 0x5c, 0xd2, 0xc6, 0x34, 0xb0, 0xc5, 0xcc, 0x3d, 0xb3, 0x0b, 0x34, 0x93, 0x34,
	0x6a, 0x61, 0x4a, 0xf5, 0x3a, 0xee, 0x04, 0xa2, 0x87, 0xc5, 0x5b, 0x8c, 0x79, 0xbb, 0xd2, 0x1f,
	0x00, 0x3c, 0xa3, 0x76, 0x2b, 0x61, 0xd3, 0xb4, 0x1a, 0xe8, 0x16, 0x44, 0x06, 0xde, 0xd3, 0xdd,
	0x26, 0xab, 0xec, 0xd9, 0x4e, 0x4b, 0x67, 0x0c, 0x3b, 0x74, 0x32, 0x3d, 0x03, 0x66, 0x4f, 0x95,
	0x66, 0xe5, 0x68, 0x79, 0xc8, 0x5b, 0xde, 0x69, 0x3b, 0xfa, 0x61, 0xd3, 0xd6, 0x8d, 0x6b, 0x1d,
	0x7b, 0xed, 0xac, 0x8f, 0xd1, 0x7d, 0x85, 0x36, 0xe0, 0x04, 0x6d, 0x98, 0xa4, 0x42, 0x3c, 0xe3,
	0x4a, 0xcd, 0x39, 0x24, 0xcc, 0x9e, 0x1c, 0x11, 0xc8, 0x05, 0xd9, 0x8b, 0x99, 0x1c, 0xc4, 0x4c,
	0x5e, 0xb2, 0xed, 0xe6, 0x2b, 0x7a, 0xd3, 0xc5, 0xda, 0x59, 0xee, 0xe6, 0x1f, 0xb1, 0x2c, 0x9c,
	0x36, 0x32, 0x59, 0x90, 0x4f, 0x6d, 0x64, 0xb2, 0xa9, 0x7c, 0x7a, 0x23, 0x93, 0xcd, 0xe4, 0x47,
	0xa4, 0x5f, 0x01, 0x38, 0xb5, 0x86, 0x59, 0x4c, 0x8d, 0x86, 0xdf, 0x72, 0x31, 0x65, 0xe8, 0x55,
	0x78, 0x26, 0x54, 0xf1, 0x15, 0xd3, 0xa0, 0x93, 0x40, 0x9c, 0x7b, 0x29, 0xae, 0x28, 0x04, 0xb0,
	0xde, 0x8d, 0xf7, 0x52, 0xf6, 0xf3, 0xa5, 0x91, 0xf7, 0x40, 0x2a, 0x0f, 0xb4, 0x71, 0x3d, 0x6c,
	0x41, 0xd1, 0x55, 0x08, 0xbb, 0x15, 0x32, 0x99, 0xea, 0xa3, 0xe6, 0x1a, 0x37, 0xd9, 0xd2, 0x69,
	0x43, 0xcb, 0xed, 0x05, 0x4b, 0xe9, 0x33, 0x00, 0xa7, 0xca, 0x4f, 0x82, 0xf3, 0xb7, 0x61, 0xa6,
	0x69, 0x5a, 0x01, 0xdb, 0x0b, 0x47, 0xe0, 0x71, 0x42, 0x21, 0x20, 0xe1, 0x16, 0x93, 0x9c, 0x7e,
	0x18, 0xc9, 0xff, 0x49, 0xc3, 0x73, 0x31, 0xf8, 0x32, 0xd3, 0x19, 0x45, 0x2f, 0xc2, 0x1c, 0xc7,
	0xc6, 0x46, 0x45, 0x67, 0xbe, 0xce, 0x24, 0xe4, 0x6e, 0x70, 0xd1, 0xb4, 0xac, 0x67, 0xac, 0x32,
	0xf4, 0x7b, 0x00, 0xcf, 0x5b, 0x98, 0x1d, 0xd8, 0x4e, 0xa3, 0xe2, 0xb5, 0xb2, 0x8a, 0x6e, 0x18,
	0x0e, 0xa6, 0x54, 0xc8, 0xcb, 0x2d, 0xfd, 0x08, 0x7c, 0xbe, 0xf4, 0x1e, 0x70, 0x7e, 0x08, 0x4a,
	0xef, 0x82, 0x37, 0x67, 0x17, 0x17, 0x66, 0x17, 0x17, 0x5e, 0xd3, 0x8b, 0x77, 0xd4, 0xe2, 0xed,
	0xcb, 0xc5, 0xab, 0x6f, 0xdc, 0x0b, 0xad, 0xbb, 0xcb, 0xd7, 0x8b, 0x6f, 0xcc, 0x87, 0x36, 0xe6,
	0x5e, 0x97, 0xe7, 0xe6, 0xb9, 0x9f, 0x5a, 0xbc, 0xad, 0x17, 0xef, 0x78, 0x7e, 0xdd, 0x75, 0x77,
	0x29, 0xfc, 0xba, 0x1b, 0x73, 0xb3, 0x8b, 0x0b, 0x0b, 0xaf, 0xf1, 0xd5, 0xdd, 0xaf, 0xbd, 0xf0,
	0x8d, 0xfb, 0x73, 0x8b, 0x17, 0xef, 0xbd, 0x79, 0x51, 0x3b, 0xe7, 0xd3, 0x2d, 0x0b, 0xb6, 0xaa,
	0x47, 0x16, 0xad, 0xc3, 0x89, 0xa6, 0x4e, 0x59, 0xc5, 0x25, 0x15, 0x07, 0xd7, 0xb0, 0xd9, 0xf6,
	0x42, 0x91, 0x1e, 0x18, 0x8a, 0x3c, 0x77, 0xbb, 0x49, 0x34, 0xdf, 0x49, 0x65, 0x68, 0x0a, 0x66,
	0x5d, 0x52, 0xa9, 0xd9, 0xae, 0xc5, 0x26, 0x33, 0x33, 0x60, 0x36, 0xa3, 0x9d, 0x74, 0xc9, 0x32,
	0x7f, 0x44, 0xb7, 0x60, 0x41, 0x9c, 0x62, 0xd8, 0x07, 0x16, 0x0f, 0x21, 0xbf, 0xe3, 0x07, 0xba,
	0x63, 0x78, 0x87, 0x8d, 0x0c, 0x3c, 0xec, 0x69, 0xee, 0xbd, 0xe2, 0x3b, 0x5f, 0x0b, 0x7c, 0x55,
	0x86, 0x9e, 0x87, 0xe3, 0x1d, 0x4c, 0xef, 0xe4, 0x51, 0x71, 0xf2, 0xe9, 0xe0, 0xad, 0x38, 0x5f,
	0xfa, 0x69, 0x1a, 0x9e, 0x51, 0xe9, 0xb2, 0x6d, 0xed, 0x99, 0x75, 0xd7, 0x11, 0x35, 0x80, 0x5e,
	0x86, 0xa3, 0xc4, 0xad, 0x52, 0xb7, 0xda, 0xb7, 0xbe, 0xa3, 0x0e, 0xf2, 0x8e, 0x5b, 0x2d, 0xbb,
	0x55, 0xcd, 0xf7, 0x2a, 0x7c, 0x94, 0x82, 0xa3, 0xde, 0x2b, 0xb4, 0x0d, 0x73, 0xc4, 0xb1, 0xdb,
	0xa6, 0xc1, 0x7b, 0x96, 0x87, 0x76, 0x79, 0x38, 0x34, 0x79, 0x27, 0xf0, 0xd3, 0xba, 0x10, 0x85,
	0xbf, 0x01, 0x98, 0xeb, 0x6c, 0xa0, 0xef, 0xc0, 0x0c, 0x6f, 0x9e, 0x02, 0x78, 0xbc, 0xf4, 0xe2,
	0xc3, 0x02, 0xcb, 0xbc, 0xd2, 0x5d, 0xaa, 0x09, 0x10, 0x0e, 0x66, 0xe9, 0xcc, 0x2b, 0xd2, 0x2f,
	0x02, 0xc6, 0x41, 0xa4, 0x97, 0xe0, 0xa8, 0xf7, 0x8c, 0x4e, 0xc1, 0x93, 0xab, 0xdb, 0xea, 0xd2,
	0xe6, 0xea, 0x4a, 0xfe, 0x04, 0x7f, 0xb8, 0xa5, 0x6a, 0xdb, 0xeb, 0xdb, 0x6b, 0x79, 0x80, 0xc6,
	0x60, 0x76, 0x65, 0xbd, 0xec, 0x6d, 0xa5, 0x0a, 0xa3, 0xff, 0xfc, 0xe5, 0x54, 0x6a, 0x12, 0x6c,
	0x64, 0xb2, 0xe9, 0x7c, 0x46, 0x7a, 0xc6, 0x6b, 0x9e, 0xd1, 0x33, 0xfd, 0x46, 0x24, 0xd5, 0x60,
	0xa1, 0xd7, 0x26, 0x25, 0x7c, 0x76, 0x40, 0xab, 0xf0, 0x74, 0x2d, 0xbc, 0xe1, 0x87, 0xfd, 0xc2,
	0x00, 0x41, 0x5a, 0xd4, 0x4b, 0x6a, 0xc0, 0xa7, 0xb7, 0xa9, 0x4a, 0xaf, 0xeb, 0x96, 0xd1, 0xc4,
	0x37, 0x49, 0x33, 0xd4, 0x08, 0x77, 0xa2, 0x8d, 0xd0, 0x25, 0x3c, 0xb5, 0xe9, 0xd9, 0x53, 0xa5,
	0x2f, 0x1d, 0xd1, 0xb8, 0x6e, 0x12, 0xd1, 0xb6, 0xde, 0x07, 0xa9, 0x6c, 0xb4, 0xff, 0xdd, 0x24,
	0x54, 0xfa, 0x77, 0x0a, 0x3e, 0xb5, 0x6a, 0xd5, 0x6c, 0x03, 0x07, 0xa5, 0x1c, 0x9c, 0xb5, 0x0b,
	0xc7, 0xbb, 0x9f, 0xe2, 0x50, 0xcf, 0xbd, 0x18, 0x3f, 0x6a, 0xd5, 0x32, 0x56, 0x84, 0x51, 0xef,
	0x8e, 0x3b, 0x86, 0xbb, 0xfb, 0x14, 0x6d, 0xc2, 0x53, 0x6d, 0xec, 0xd0, 0xa0, 0x8d, 0x7b, 0x6d,
	0xf7, 0xab, 0x7d, 0x21, 0x5f, 0xf1, 0x6c, 0x43, 0xc8, 0x1a, 0x6c, 0x07, 0xef, 0x78, 0xa7, 0xc8,
	0x06, 0x97, 0xca, 0x6f, 0x0f, 0xcf, 0x1d, 0x11, 0x88, 0x40, 0x61, 0x88, 0x5c, 0xc7, 0x1d, 0x5d,
	0x87, 0xb9, 0xce, 0x47, 0x5e, 0xb4, 0x8a, 0xf1, 0xd2, 0x4c, 0x1c, 0x2b, 0xfe, 0x71, 0x17, 0x40,
	0xef, 0x08, 0xa0, 0xae, 0x33, 0x7a, 0x16, 0xe6, 0x88, 0xee, 0xe8, 0x2d, 0xcc, 0x91, 0x78, 0x1f,
	0xc9, 0x69, 0xdd, 0x17, 0xd2, 0xab, 0xf0, 0x7c, 0x3c, 0xde, 0x7e, 0xf9, 0x2c, 0x86, 0xc4, 0x80,
	0xa1, 0xc5, 0x74, 0x25, 0x48, 0x7f, 0x4f, 0xc1, 0x89, 0x15, 0xcc, 0xb1, 0xa3, 0x55, 0xf3, 0xbf,
	0x90, 0xc9, 0x65, 0x38, 0xea, 0x92, 0x50, 0x1e, 0xbf, 0x7c, 0x64, 0x41, 0xc7, 0xb2, 0xe8, 0xbb,
	0x1e, 0x5b, 0x0e, 0x6f, 0xc0, 0x73, 0xd1, 0x38, 0xfb, 0x19, 0xbc, 0xda, 0x11, 0x01, 0x86, 0x14,
	0x11, 0x50, 0x17, 0xf7, 0xd0, 0xc3, 0xfc, 0xff, 0x3d, 0x3c, 0xae, 0x7b, 0x18, 0x8f, 0xf7, 0x63,
	0xba, 0x87, 0xa5, 0x8f, 0x47, 0x60, 0x4a, 0xa5, 0xe8, 0x03, 0x00, 0x4f, 0xae, 0x61, 0x26, 0xfe,
	0x94, 0x98, 0x8b, 0x23, 0xf4, 0x1d, 0xd0, 0x0b, 0x83, 0x66, 0x50, 0xe9, 0xe5, 0x77, 0x3e, 0xf9,
	0xeb, 0x4f, 0x52, 0x2f, 0xa1, 0x6f, 0x2a, 0x3a, 0x8d, 0xfc, 0xf5, 0xaa, 0xdc, 0x8d, 0x4d, 0xc9,
	0x72, 0xf4, 0xf9, 0xbe, 0x22, 0x22, 0xfc, 0x33, 0x00, 0x4f, 0x96, 0xfb, 0xf1, 0x2a, 0x3f, 0x3a,
	0x2f, 0x55, 0xf0, 0xfa, 0x56, 0xe1, 0x11, 0x79, 0x2d, 0x80, 0x79, 0x74, 0x0f, 0xc2, 0x15, 0xdc,
	0xc4, 0x0c, 0x0b, 0x72, 0x43, 0x4e, 0xf7, 0x85, 0xf3, 0x89, 0x29, 0x6d, 0x95, 0xff, 0x15, 0x2b,
	0xc9, 0x82, 0xd0, 0xec, 0xfc, 0xa5, 0x41, 0x84, 0xfc, 0xc0, 0xbc, 0x0f, 0xe0, 0x98, 0x9f, 0x30,
	0x6f, 0x12, 0x1f, 0x96, 0xc0, 0xc5, 0x01, 0xa1, 0x11, 0x68, 0xd2, 0xd7, 0x05, 0x1d, 0x19, 0xbd,
	0x30, 0x1c, 0x1d, 0x85, 0x0a, 0x0e, 0xef, 0x02, 0x98, 0x5f, 0xc3, 0x2c, 0x3a, 0x27, 0xf6, 0x2c,
	0xa7, 0x9e, 0x23, 0x4b, 0x61, 0x7e, 0x18, 0x53, 0xaf, 0xf2, 0xa5, 0x29, 0xc1, 0x70, 0x02, 0x9d,
	0xe5, 0x0c, 0x23, 0x43, 0x49, 0xe9, 0x16, 0xcc, 0xf0, 0xa1, 0x04, 0x7d, 0x17, 0x8e, 0x85, 0x07,
	0x13, 0xf4, 0x95, 0x38, 0x7c, 0x9f, 0xd1, 0xa5, 0x5f, 0x92, 0x4a, 0x1f, 0x9e, 0x86, 0x23, 0x2a,
	0x21, 0x2a, 0x45, 0xbb, 0x30, 0x57, 0x76, 0xab, 0xb4, 0xe6, 0x98, 0x55, 0x3c, 0x74, 0xe8, 0x8f,
	0x1e, 0x7c, 0x2e, 0x03, 0xf4, 0x47, 0x00, 0xcf, 0x06, 0x77, 0xf4, 0x86, 0x8b, 0x5d, 0xbc, 0xe3,
	0xd2, 0x7d, 0x94, 0xc8, 0x58, 0xc4, 0x64, 0x00, 0x67, 0xe9, 0x6d, 0x11, 0x27, 0x47, 0x6a, 0x25,
	0x33, 0x19, 0x6d, 0xd5, 0xf2, 0xa0, 0xc2, 0xf7, 0x4c, 0x93, 0x7e, 0x9d, 0xe5, 0x7d, 0x85, 0xb7,
	0x15, 0x85, 0xb8, 0x74, 0x9f, 0x5f, 0x90, 0x8f, 0x01, 0x3c, 0x17, 0xa3, 0x4a, 0x9a, 0x7a, 0x0d,
	0x7f, 0x41, 0x41, 0x77, 0x85, 0x20, 0x57, 0x22, 0xc7, 0x26, 0xc8, 0xf1, 0x78, 0x73, 0x4d, 0x1f,
	0xc6, 0x33, 0xb4, 0x69, 0x52, 0x86, 0x86, 0xfa, 0xbc, 0x1d, 0x79, 0xf3, 0x02, 0x4c, 0x2a, 0x69,
	0x42, 0xde, 0x26, 0xda, 0x78, 0xf8, 0xce, 0xd4, 0xd1, 0x13, 0x13, 0x80, 0x7e, 0x0e, 0xe0, 0x53,
	0x6b, 0x98, 0x6d, 0xdd, 0xd8, 0xdd, 0x5d, 0xb6, 0x2d, 0x0b, 0xd7, 0x44, 0x65, 0x5a, 0x7b, 0xf6,
	0xd0, 0xa5, 0x2b, 0x25, 0x7e, 0x42, 0x4a, 0x60, 0x0d, 0xdf, 0xeb, 0xef, 0x8b, 0x1f, 0xb3, 0x8a,
	0xb5, 0x8e, 0x7b, 0xd1, 0xe4, 0x5c, 0x7e, 0x07, 0xe0, 0x78, 0xd9, 0x6c, 0xb9, 0x4d, 0x9d, 0x05,
	0x37, 0xf6, 0xe8, 0x1b, 0xd3, 0xb7, 0x44, 0xee, 0x08, 0x26, 0x4c, 0xb2, 0x8f, 0xa3, 0x44, 0x5c,
	0xa2, 0x50, 0x9f, 0x35, 0xaf, 0x90, 0x3f, 0x03, 0x38, 0x1e, 0x1d, 0x9a, 0xd1, 0xf3, 0xc9, 0xf2,
	0xe8, 0x31, 0x3c, 0x15, 0x2e, 0x0d, 0x32, 0xf3, 0x3b, 0xdf, 0xb1, 0xaa, 0x13, 0x17, 0x00, 0x0b,
	0x22, 0x5c, 0xdd, 0x27, 0x00, 0x8e, 0x85, 0xc7, 0x49, 0x94, 0x18, 0x37, 0x7a, 0x0c, 0xf5, 0xc9,
	0xca, 0xef, 0x35, 0x91, 0x1e, 0x6f, 0xa7, 0x72, 0x89, 0x62, 0xe0, 0x40, 0x15, 0xcf, 0x59, 0x74,
	0xc0, 0x4a, 0xe6, 0xac, 0xe7, 0xc0, 0x9b, 0xcc, 0x59, 0xef, 0x39, 0xed, 0x09, 0xe4, 0xac, 0xa3,
	0xae, 0xf4, 0xaf, 0x0c, 0x9c, 0x50, 0x69, 0xa7, 0x25, 0x69, 0xb8, 0x6e, 0x52, 0xe6, 0x1c, 0xa2,
	0x5f, 0x03, 0x98, 0x5e, 0xc3, 0x2c, 0x99, 0xc2, 0x35, 0xcc, 0x42, 0xd6, 0x9e, 0xd0, 0xa9, 0xbe,
	0x2d, 0x4e, 0x6a, 0x08, 0x6d, 0x18, 0xd5, 0x8e, 0x41, 0x1b, 0xfa, 0x41, 0x0a, 0xa6, 0xcb, 0xbd,
	0x48, 0x97, 0x1f, 0x8e, 0xf4, 0x6f, 0x81, 0x60, 0xfd, 0x1b, 0x50, 0x38, 0x92, 0xb6, 0xfc, 0x88,
	0xb4, 0xe5, 0x28, 0xed, 0x05, 0x30, 0x7f, 0x7b, 0x4b, 0xba, 0xfe, 0xb8, 0x4e, 0xe2, 0x35, 0xfb,
	0x01, 0x80, 0xa3, 0xde, 0xfc, 0x39, 0xe4, 0xe7, 0xa7, 0x5f, 0xb3, 0xdc, 0x12, 0x81, 0x58, 0x9b,
	0x5f, 0x7d, 0x2c, 0x1f, 0x9c, 0xa5, 0xad, 0x3f, 0xfd, 0x65, 0xfa, 0xc4, 0xf7, 0x1f, 0x4c, 0x83,
	0x5f, 0x3c, 0x98, 0x06, 0xff, 0x78, 0x30, 0x7d, 0xe2, 0xb3, 0x07, 0xd3, 0xe0, 0xc7, 0x9f, 0x4e,
	0x9f, 0xf8, 0xe8, 0xd3, 0x69, 0x70, 0x5b, 0xa9, 0xdb, 0x32, 0xdb, 0xc7, 0x4c, 0xfc, 0x7b, 0x48,
	0xf6, 0x7f, 0x51, 0x55, 0xa2, 0xff, 0xed, 0x68, 0x5f, 0x51, 0x48, 0xa3, 0xae, 0x30, 0x66, 0x91,
	0x6a, 0x75, 0x54, 0xb0, 0xbd, 0xf2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x99, 0x1d, 0x72,
	0x0d, 0x1b, 0x00, 0x00,
}

func (x AsConfiguration_PubSub_Providers_Status) String() string {
	s, ok := AsConfiguration_PubSub_Providers_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ApplicationLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLink)
	if !ok {
		that2, ok := that.(ApplicationLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultFormatters.Equal(that1.DefaultFormatters) {
		return false
	}
	if !this.SkipPayloadCrypto.Equal(that1.SkipPayloadCrypto) {
		return false
	}
	return true
}
func (this *GetApplicationLinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApplicationLinkRequest)
	if !ok {
		that2, ok := that.(GetApplicationLinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(that1.ApplicationIds) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *SetApplicationLinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetApplicationLinkRequest)
	if !ok {
		that2, ok := that.(SetApplicationLinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(that1.ApplicationIds) {
		return false
	}
	if !this.Link.Equal(that1.Link) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ApplicationLinkStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLinkStats)
	if !ok {
		that2, ok := that.(ApplicationLinkStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LinkedAt.Equal(that1.LinkedAt) {
		return false
	}
	if this.NetworkServerAddress != that1.NetworkServerAddress {
		return false
	}
	if !this.LastUpReceivedAt.Equal(that1.LastUpReceivedAt) {
		return false
	}
	if this.UpCount != that1.UpCount {
		return false
	}
	if !this.LastDownlinkForwardedAt.Equal(that1.LastDownlinkForwardedAt) {
		return false
	}
	if this.DownlinkCount != that1.DownlinkCount {
		return false
	}
	return true
}
func (this *AsConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AsConfiguration)
	if !ok {
		that2, ok := that.(AsConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubsub.Equal(that1.Pubsub) {
		return false
	}
	return true
}
func (this *AsConfiguration_PubSub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AsConfiguration_PubSub)
	if !ok {
		that2, ok := that.(AsConfiguration_PubSub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Providers.Equal(that1.Providers) {
		return false
	}
	return true
}
func (this *AsConfiguration_PubSub_Providers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AsConfiguration_PubSub_Providers)
	if !ok {
		that2, ok := that.(AsConfiguration_PubSub_Providers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mqtt != that1.Mqtt {
		return false
	}
	if this.Nats != that1.Nats {
		return false
	}
	return true
}
func (this *GetAsConfigurationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAsConfigurationRequest)
	if !ok {
		that2, ok := that.(GetAsConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAsConfigurationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAsConfigurationResponse)
	if !ok {
		that2, ok := that.(GetAsConfigurationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	return true
}
func (this *NsAsHandleUplinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NsAsHandleUplinkRequest)
	if !ok {
		that2, ok := that.(NsAsHandleUplinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApplicationUps) != len(that1.ApplicationUps) {
		return false
	}
	for i := range this.ApplicationUps {
		if !this.ApplicationUps[i].Equal(that1.ApplicationUps[i]) {
			return false
		}
	}
	return true
}
func (this *EncodeDownlinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncodeDownlinkRequest)
	if !ok {
		that2, ok := that.(EncodeDownlinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIds.Equal(that1.EndDeviceIds) {
		return false
	}
	if !this.VersionIds.Equal(that1.VersionIds) {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	if this.Formatter != that1.Formatter {
		return false
	}
	if this.Parameter != that1.Parameter {
		return false
	}
	return true
}
func (this *EncodeDownlinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncodeDownlinkResponse)
	if !ok {
		that2, ok := that.(EncodeDownlinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	return true
}
func (this *DecodeUplinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecodeUplinkRequest)
	if !ok {
		that2, ok := that.(DecodeUplinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIds.Equal(that1.EndDeviceIds) {
		return false
	}
	if !this.VersionIds.Equal(that1.VersionIds) {
		return false
	}
	if !this.Uplink.Equal(that1.Uplink) {
		return false
	}
	if this.Formatter != that1.Formatter {
		return false
	}
	if this.Parameter != that1.Parameter {
		return false
	}
	return true
}
func (this *DecodeUplinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecodeUplinkResponse)
	if !ok {
		that2, ok := that.(DecodeUplinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uplink.Equal(that1.Uplink) {
		return false
	}
	return true
}
func (this *DecodeDownlinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecodeDownlinkRequest)
	if !ok {
		that2, ok := that.(DecodeDownlinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIds.Equal(that1.EndDeviceIds) {
		return false
	}
	if !this.VersionIds.Equal(that1.VersionIds) {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	if this.Formatter != that1.Formatter {
		return false
	}
	if this.Parameter != that1.Parameter {
		return false
	}
	return true
}
func (this *DecodeDownlinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecodeDownlinkResponse)
	if !ok {
		that2, ok := that.(DecodeDownlinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsClient is the client API for As service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsClient interface {
	// Get a link configuration from the Application Server to Network Server.
	// This only contains the configuration. Use GetLinkStats to view statistics and any link errors.
	GetLink(ctx context.Context, in *GetApplicationLinkRequest, opts ...grpc.CallOption) (*ApplicationLink, error)
	// Set a link configuration from the Application Server a Network Server.
	// This call returns immediately after setting the link configuration; it does not wait for a link to establish.
	// To get link statistics or errors, use GetLinkStats.
	// Note that there can only be one Application Server instance linked to a Network Server for a given application at a time.
	SetLink(ctx context.Context, in *SetApplicationLinkRequest, opts ...grpc.CallOption) (*ApplicationLink, error)
	// Delete the link between the Application Server and Network Server for the specified application.
	DeleteLink(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// GetLinkStats returns the link statistics.
	// This call returns a NotFound error code if there is no link for the given application identifiers.
	// This call returns the error code of the link error if linking to a Network Server failed.
	GetLinkStats(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ApplicationLinkStats, error)
	GetConfiguration(ctx context.Context, in *GetAsConfigurationRequest, opts ...grpc.CallOption) (*GetAsConfigurationResponse, error)
}

type asClient struct {
	cc *grpc.ClientConn
}

func NewAsClient(cc *grpc.ClientConn) AsClient {
	return &asClient{cc}
}

func (c *asClient) GetLink(ctx context.Context, in *GetApplicationLinkRequest, opts ...grpc.CallOption) (*ApplicationLink, error) {
	out := new(ApplicationLink)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.As/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asClient) SetLink(ctx context.Context, in *SetApplicationLinkRequest, opts ...grpc.CallOption) (*ApplicationLink, error) {
	out := new(ApplicationLink)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.As/SetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asClient) DeleteLink(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.As/DeleteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asClient) GetLinkStats(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*ApplicationLinkStats, error) {
	out := new(ApplicationLinkStats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.As/GetLinkStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asClient) GetConfiguration(ctx context.Context, in *GetAsConfigurationRequest, opts ...grpc.CallOption) (*GetAsConfigurationResponse, error) {
	out := new(GetAsConfigurationResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.As/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsServer is the server API for As service.
type AsServer interface {
	// Get a link configuration from the Application Server to Network Server.
	// This only contains the configuration. Use GetLinkStats to view statistics and any link errors.
	GetLink(context.Context, *GetApplicationLinkRequest) (*ApplicationLink, error)
	// Set a link configuration from the Application Server a Network Server.
	// This call returns immediately after setting the link configuration; it does not wait for a link to establish.
	// To get link statistics or errors, use GetLinkStats.
	// Note that there can only be one Application Server instance linked to a Network Server for a given application at a time.
	SetLink(context.Context, *SetApplicationLinkRequest) (*ApplicationLink, error)
	// Delete the link between the Application Server and Network Server for the specified application.
	DeleteLink(context.Context, *ApplicationIdentifiers) (*types.Empty, error)
	// GetLinkStats returns the link statistics.
	// This call returns a NotFound error code if there is no link for the given application identifiers.
	// This call returns the error code of the link error if linking to a Network Server failed.
	GetLinkStats(context.Context, *ApplicationIdentifiers) (*ApplicationLinkStats, error)
	GetConfiguration(context.Context, *GetAsConfigurationRequest) (*GetAsConfigurationResponse, error)
}

// UnimplementedAsServer can be embedded to have forward compatible implementations.
type UnimplementedAsServer struct {
}

func (*UnimplementedAsServer) GetLink(ctx context.Context, req *GetApplicationLinkRequest) (*ApplicationLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (*UnimplementedAsServer) SetLink(ctx context.Context, req *SetApplicationLinkRequest) (*ApplicationLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLink not implemented")
}
func (*UnimplementedAsServer) DeleteLink(ctx context.Context, req *ApplicationIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (*UnimplementedAsServer) GetLinkStats(ctx context.Context, req *ApplicationIdentifiers) (*ApplicationLinkStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkStats not implemented")
}
func (*UnimplementedAsServer) GetConfiguration(ctx context.Context, req *GetAsConfigurationRequest) (*GetAsConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}

func RegisterAsServer(s *grpc.Server, srv AsServer) {
	s.RegisterService(&_As_serviceDesc, srv)
}

func _As_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.As/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsServer).GetLink(ctx, req.(*GetApplicationLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _As_SetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsServer).SetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.As/SetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsServer).SetLink(ctx, req.(*SetApplicationLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _As_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.As/DeleteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsServer).DeleteLink(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _As_GetLinkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsServer).GetLinkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.As/GetLinkStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsServer).GetLinkStats(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _As_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAsConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.As/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsServer).GetConfiguration(ctx, req.(*GetAsConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _As_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.As",
	HandlerType: (*AsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLink",
			Handler:    _As_GetLink_Handler,
		},
		{
			MethodName: "SetLink",
			Handler:    _As_SetLink_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _As_DeleteLink_Handler,
		},
		{
			MethodName: "GetLinkStats",
			Handler:    _As_GetLinkStats_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _As_GetConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/applicationserver.proto",
}

// NsAsClient is the client API for NsAs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NsAsClient interface {
	// Handle Application uplink messages.
	HandleUplink(ctx context.Context, in *NsAsHandleUplinkRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type nsAsClient struct {
	cc *grpc.ClientConn
}

func NewNsAsClient(cc *grpc.ClientConn) NsAsClient {
	return &nsAsClient{cc}
}

func (c *nsAsClient) HandleUplink(ctx context.Context, in *NsAsHandleUplinkRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsAs/HandleUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsAsServer is the server API for NsAs service.
type NsAsServer interface {
	// Handle Application uplink messages.
	HandleUplink(context.Context, *NsAsHandleUplinkRequest) (*types.Empty, error)
}

// UnimplementedNsAsServer can be embedded to have forward compatible implementations.
type UnimplementedNsAsServer struct {
}

func (*UnimplementedNsAsServer) HandleUplink(ctx context.Context, req *NsAsHandleUplinkRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUplink not implemented")
}

func RegisterNsAsServer(s *grpc.Server, srv NsAsServer) {
	s.RegisterService(&_NsAs_serviceDesc, srv)
}

func _NsAs_HandleUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NsAsHandleUplinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsAsServer).HandleUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsAs/HandleUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsAsServer).HandleUplink(ctx, req.(*NsAsHandleUplinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsAs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsAs",
	HandlerType: (*NsAsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUplink",
			Handler:    _NsAs_HandleUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/applicationserver.proto",
}

// AppAsClient is the client API for AppAs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppAsClient interface {
	// Subscribe to upstream messages.
	Subscribe(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AppAs_SubscribeClient, error)
	// Push downlink messages to the end of the downlink queue.
	DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Replace the entire downlink queue with the specified messages.
	// This can also be used to empty the queue by specifying no messages.
	DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// List the items currently in the downlink queue.
	DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error)
	// Get connection information to connect an MQTT client.
	GetMQTTConnectionInfo(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*MQTTConnectionInfo, error)
	// Simulate an upstream message. This can be used to test integrations.
	SimulateUplink(ctx context.Context, in *ApplicationUp, opts ...grpc.CallOption) (*types.Empty, error)
	EncodeDownlink(ctx context.Context, in *EncodeDownlinkRequest, opts ...grpc.CallOption) (*EncodeDownlinkResponse, error)
	DecodeUplink(ctx context.Context, in *DecodeUplinkRequest, opts ...grpc.CallOption) (*DecodeUplinkResponse, error)
	DecodeDownlink(ctx context.Context, in *DecodeDownlinkRequest, opts ...grpc.CallOption) (*DecodeDownlinkResponse, error)
}

type appAsClient struct {
	cc *grpc.ClientConn
}

func NewAppAsClient(cc *grpc.ClientConn) AppAsClient {
	return &appAsClient{cc}
}

func (c *appAsClient) Subscribe(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (AppAs_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppAs_serviceDesc.Streams[0], "/ttn.lorawan.v3.AppAs/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &appAsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppAs_SubscribeClient interface {
	Recv() (*ApplicationUp, error)
	grpc.ClientStream
}

type appAsSubscribeClient struct {
	grpc.ClientStream
}

func (x *appAsSubscribeClient) Recv() (*ApplicationUp, error) {
	m := new(ApplicationUp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appAsClient) DownlinkQueuePush(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/DownlinkQueuePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAsClient) DownlinkQueueReplace(ctx context.Context, in *DownlinkQueueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/DownlinkQueueReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAsClient) DownlinkQueueList(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*ApplicationDownlinks, error) {
	out := new(ApplicationDownlinks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/DownlinkQueueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAsClient) GetMQTTConnectionInfo(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*MQTTConnectionInfo, error) {
	out := new(MQTTConnectionInfo)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/GetMQTTConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAsClient) SimulateUplink(ctx context.Context, in *ApplicationUp, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/SimulateUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAsClient) EncodeDownlink(ctx context.Context, in *EncodeDownlinkRequest, opts ...grpc.CallOption) (*EncodeDownlinkResponse, error) {
	out := new(EncodeDownlinkResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/EncodeDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAsClient) DecodeUplink(ctx context.Context, in *DecodeUplinkRequest, opts ...grpc.CallOption) (*DecodeUplinkResponse, error) {
	out := new(DecodeUplinkResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/DecodeUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAsClient) DecodeDownlink(ctx context.Context, in *DecodeDownlinkRequest, opts ...grpc.CallOption) (*DecodeDownlinkResponse, error) {
	out := new(DecodeDownlinkResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppAs/DecodeDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppAsServer is the server API for AppAs service.
type AppAsServer interface {
	// Subscribe to upstream messages.
	Subscribe(*ApplicationIdentifiers, AppAs_SubscribeServer) error
	// Push downlink messages to the end of the downlink queue.
	DownlinkQueuePush(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	// Replace the entire downlink queue with the specified messages.
	// This can also be used to empty the queue by specifying no messages.
	DownlinkQueueReplace(context.Context, *DownlinkQueueRequest) (*types.Empty, error)
	// List the items currently in the downlink queue.
	DownlinkQueueList(context.Context, *EndDeviceIdentifiers) (*ApplicationDownlinks, error)
	// Get connection information to connect an MQTT client.
	GetMQTTConnectionInfo(context.Context, *ApplicationIdentifiers) (*MQTTConnectionInfo, error)
	// Simulate an upstream message. This can be used to test integrations.
	SimulateUplink(context.Context, *ApplicationUp) (*types.Empty, error)
	EncodeDownlink(context.Context, *EncodeDownlinkRequest) (*EncodeDownlinkResponse, error)
	DecodeUplink(context.Context, *DecodeUplinkRequest) (*DecodeUplinkResponse, error)
	DecodeDownlink(context.Context, *DecodeDownlinkRequest) (*DecodeDownlinkResponse, error)
}

// UnimplementedAppAsServer can be embedded to have forward compatible implementations.
type UnimplementedAppAsServer struct {
}

func (*UnimplementedAppAsServer) Subscribe(req *ApplicationIdentifiers, srv AppAs_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedAppAsServer) DownlinkQueuePush(ctx context.Context, req *DownlinkQueueRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownlinkQueuePush not implemented")
}
func (*UnimplementedAppAsServer) DownlinkQueueReplace(ctx context.Context, req *DownlinkQueueRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownlinkQueueReplace not implemented")
}
func (*UnimplementedAppAsServer) DownlinkQueueList(ctx context.Context, req *EndDeviceIdentifiers) (*ApplicationDownlinks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownlinkQueueList not implemented")
}
func (*UnimplementedAppAsServer) GetMQTTConnectionInfo(ctx context.Context, req *ApplicationIdentifiers) (*MQTTConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMQTTConnectionInfo not implemented")
}
func (*UnimplementedAppAsServer) SimulateUplink(ctx context.Context, req *ApplicationUp) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateUplink not implemented")
}
func (*UnimplementedAppAsServer) EncodeDownlink(ctx context.Context, req *EncodeDownlinkRequest) (*EncodeDownlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeDownlink not implemented")
}
func (*UnimplementedAppAsServer) DecodeUplink(ctx context.Context, req *DecodeUplinkRequest) (*DecodeUplinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeUplink not implemented")
}
func (*UnimplementedAppAsServer) DecodeDownlink(ctx context.Context, req *DecodeDownlinkRequest) (*DecodeDownlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeDownlink not implemented")
}

func RegisterAppAsServer(s *grpc.Server, srv AppAsServer) {
	s.RegisterService(&_AppAs_serviceDesc, srv)
}

func _AppAs_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplicationIdentifiers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppAsServer).Subscribe(m, &appAsSubscribeServer{stream})
}

type AppAs_SubscribeServer interface {
	Send(*ApplicationUp) error
	grpc.ServerStream
}

type appAsSubscribeServer struct {
	grpc.ServerStream
}

func (x *appAsSubscribeServer) Send(m *ApplicationUp) error {
	return x.ServerStream.SendMsg(m)
}

func _AppAs_DownlinkQueuePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).DownlinkQueuePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/DownlinkQueuePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).DownlinkQueuePush(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAs_DownlinkQueueReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).DownlinkQueueReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/DownlinkQueueReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).DownlinkQueueReplace(ctx, req.(*DownlinkQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAs_DownlinkQueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).DownlinkQueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/DownlinkQueueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).DownlinkQueueList(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAs_GetMQTTConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).GetMQTTConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/GetMQTTConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).GetMQTTConnectionInfo(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAs_SimulateUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).SimulateUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/SimulateUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).SimulateUplink(ctx, req.(*ApplicationUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAs_EncodeDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeDownlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).EncodeDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/EncodeDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).EncodeDownlink(ctx, req.(*EncodeDownlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAs_DecodeUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeUplinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).DecodeUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/DecodeUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).DecodeUplink(ctx, req.(*DecodeUplinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAs_DecodeDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeDownlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAsServer).DecodeDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppAs/DecodeDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAsServer).DecodeDownlink(ctx, req.(*DecodeDownlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppAs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AppAs",
	HandlerType: (*AppAsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownlinkQueuePush",
			Handler:    _AppAs_DownlinkQueuePush_Handler,
		},
		{
			MethodName: "DownlinkQueueReplace",
			Handler:    _AppAs_DownlinkQueueReplace_Handler,
		},
		{
			MethodName: "DownlinkQueueList",
			Handler:    _AppAs_DownlinkQueueList_Handler,
		},
		{
			MethodName: "GetMQTTConnectionInfo",
			Handler:    _AppAs_GetMQTTConnectionInfo_Handler,
		},
		{
			MethodName: "SimulateUplink",
			Handler:    _AppAs_SimulateUplink_Handler,
		},
		{
			MethodName: "EncodeDownlink",
			Handler:    _AppAs_EncodeDownlink_Handler,
		},
		{
			MethodName: "DecodeUplink",
			Handler:    _AppAs_DecodeUplink_Handler,
		},
		{
			MethodName: "DecodeDownlink",
			Handler:    _AppAs_DecodeDownlink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AppAs_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lorawan-stack/api/applicationserver.proto",
}

// AsEndDeviceRegistryClient is the client API for AsEndDeviceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsEndDeviceRegistryClient interface {
	// Get returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Set creates or updates the device.
	Set(ctx context.Context, in *SetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Delete deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type asEndDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewAsEndDeviceRegistryClient(cc *grpc.ClientConn) AsEndDeviceRegistryClient {
	return &asEndDeviceRegistryClient{cc}
}

func (c *asEndDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsEndDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asEndDeviceRegistryClient) Set(ctx context.Context, in *SetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsEndDeviceRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asEndDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsEndDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsEndDeviceRegistryServer is the server API for AsEndDeviceRegistry service.
type AsEndDeviceRegistryServer interface {
	// Get returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// Set creates or updates the device.
	Set(context.Context, *SetEndDeviceRequest) (*EndDevice, error)
	// Delete deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

// UnimplementedAsEndDeviceRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedAsEndDeviceRegistryServer struct {
}

func (*UnimplementedAsEndDeviceRegistryServer) Get(ctx context.Context, req *GetEndDeviceRequest) (*EndDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAsEndDeviceRegistryServer) Set(ctx context.Context, req *SetEndDeviceRequest) (*EndDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedAsEndDeviceRegistryServer) Delete(ctx context.Context, req *EndDeviceIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAsEndDeviceRegistryServer(s *grpc.Server, srv AsEndDeviceRegistryServer) {
	s.RegisterService(&_AsEndDeviceRegistry_serviceDesc, srv)
}

func _AsEndDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsEndDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsEndDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsEndDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsEndDeviceRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsEndDeviceRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsEndDeviceRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsEndDeviceRegistryServer).Set(ctx, req.(*SetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsEndDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsEndDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsEndDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsEndDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsEndDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsEndDeviceRegistry",
	HandlerType: (*AsEndDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AsEndDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _AsEndDeviceRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AsEndDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/applicationserver.proto",
}

func (this *ApplicationLink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationLink{`,
		`DefaultFormatters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFormatters), "MessagePayloadFormatters", "MessagePayloadFormatters", 1) + `,`,
		`SkipPayloadCrypto:` + strings.Replace(fmt.Sprintf("%v", this.SkipPayloadCrypto), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApplicationLinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApplicationLinkRequest{`,
		`ApplicationIds:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetApplicationLinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetApplicationLinkRequest{`,
		`ApplicationIds:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1) + `,`,
		`Link:` + strings.Replace(this.Link.String(), "ApplicationLink", "ApplicationLink", 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationLinkStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationLinkStats{`,
		`LinkedAt:` + strings.Replace(fmt.Sprintf("%v", this.LinkedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`NetworkServerAddress:` + fmt.Sprintf("%v", this.NetworkServerAddress) + `,`,
		`LastUpReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastUpReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpCount:` + fmt.Sprintf("%v", this.UpCount) + `,`,
		`LastDownlinkForwardedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastDownlinkForwardedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`DownlinkCount:` + fmt.Sprintf("%v", this.DownlinkCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AsConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AsConfiguration{`,
		`Pubsub:` + strings.Replace(fmt.Sprintf("%v", this.Pubsub), "AsConfiguration_PubSub", "AsConfiguration_PubSub", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AsConfiguration_PubSub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AsConfiguration_PubSub{`,
		`Providers:` + strings.Replace(fmt.Sprintf("%v", this.Providers), "AsConfiguration_PubSub_Providers", "AsConfiguration_PubSub_Providers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AsConfiguration_PubSub_Providers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AsConfiguration_PubSub_Providers{`,
		`Mqtt:` + fmt.Sprintf("%v", this.Mqtt) + `,`,
		`Nats:` + fmt.Sprintf("%v", this.Nats) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAsConfigurationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAsConfigurationRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetAsConfigurationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAsConfigurationResponse{`,
		`Configuration:` + strings.Replace(this.Configuration.String(), "AsConfiguration", "AsConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NsAsHandleUplinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApplicationUps := "[]*ApplicationUp{"
	for _, f := range this.ApplicationUps {
		repeatedStringForApplicationUps += strings.Replace(fmt.Sprintf("%v", f), "ApplicationUp", "ApplicationUp", 1) + ","
	}
	repeatedStringForApplicationUps += "}"
	s := strings.Join([]string{`&NsAsHandleUplinkRequest{`,
		`ApplicationUps:` + repeatedStringForApplicationUps + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncodeDownlinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncodeDownlinkRequest{`,
		`EndDeviceIds:` + strings.Replace(fmt.Sprintf("%v", this.EndDeviceIds), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1) + `,`,
		`VersionIds:` + strings.Replace(fmt.Sprintf("%v", this.VersionIds), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1) + `,`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`Formatter:` + fmt.Sprintf("%v", this.Formatter) + `,`,
		`Parameter:` + fmt.Sprintf("%v", this.Parameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncodeDownlinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncodeDownlinkResponse{`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecodeUplinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecodeUplinkRequest{`,
		`EndDeviceIds:` + strings.Replace(fmt.Sprintf("%v", this.EndDeviceIds), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1) + `,`,
		`VersionIds:` + strings.Replace(fmt.Sprintf("%v", this.VersionIds), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1) + `,`,
		`Uplink:` + strings.Replace(fmt.Sprintf("%v", this.Uplink), "ApplicationUplink", "ApplicationUplink", 1) + `,`,
		`Formatter:` + fmt.Sprintf("%v", this.Formatter) + `,`,
		`Parameter:` + fmt.Sprintf("%v", this.Parameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecodeUplinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecodeUplinkResponse{`,
		`Uplink:` + strings.Replace(fmt.Sprintf("%v", this.Uplink), "ApplicationUplink", "ApplicationUplink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecodeDownlinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecodeDownlinkRequest{`,
		`EndDeviceIds:` + strings.Replace(fmt.Sprintf("%v", this.EndDeviceIds), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1) + `,`,
		`VersionIds:` + strings.Replace(fmt.Sprintf("%v", this.VersionIds), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1) + `,`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`Formatter:` + fmt.Sprintf("%v", this.Formatter) + `,`,
		`Parameter:` + fmt.Sprintf("%v", this.Parameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecodeDownlinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecodeDownlinkResponse{`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplicationserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
